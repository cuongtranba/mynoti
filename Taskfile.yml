version: "3"
dotenv:
  - .env
tasks:
  default:
    desc: Display available tasks
    cmds:
      - task --list

  go:build:
    internal: true
    desc: "Build the Go application using the specified directory and name."
    prefix: "{{.APP_NAME}}"
    label: "{{.APP_NAME}}"
    cmds:
      - go build -o ./bin/{{.APP_NAME}} {{.APP_DIR}}/main.go
    requires:
      vars:
        - APP_DIR
        - APP_NAME

  go:run:
    internal: true
    desc: "Run the Go application using the specified directory and name."
    cmds:
      - ./bin/{{.APP_NAME}}
    requires:
      vars:
        - APP_DIR
        - APP_NAME
  go:dev:
    cmds:
      - task: go:build
        vars: { APP_DIR: "{{.APP_DIR}}", APP_NAME: "{{.APP_NAME}}" }
      - task: go:run
        vars: { APP_DIR: "{{.APP_DIR}}", APP_NAME: "{{.APP_NAME}}" }

  generate:
    desc: Generate code for database queries using SQLC based on the specified SQL schema and queries.
    cmds:
      - sqlc generate

  migration:create:
    desc: Create a new database migration file with a sequential timestamp and the specified name. The migration files will be created in the `migrations` directory.
    cmds:
      - migrate create -ext sql -dir migrations -seq {{.NAME}}
    requires:
      vars: [NAME]

  migration:up:
    desc: Apply all pending migrations to the database using the specified database URL. The migrations are sourced from the `migrations` directory.
    cmds:
      - migrate -path migrations -database {{.DATABASE_URL}} up
    requires:
      vars: [DATABASE_URL]

  test:
    desc: Run tests
    cmds:
      - go test -v ./...

  app:api:
    desc: Run the api app
    vars:
      APP_DIR: "cmd/server"
      APP_NAME: "api"
    cmds:
      - task: go:dev
        vars: { APP_DIR: "{{.APP_DIR}}", APP_NAME: "{{.APP_NAME}}" }

  app:cli:
    desc: Run the CLI app
    vars:
      APP_DIR: "cmd/cli"
      APP_NAME: "cli"
    cmds:
      - task: go:dev
        vars: { APP_DIR: "{{.APP_DIR}}", APP_NAME: "{{.APP_NAME}}" }
