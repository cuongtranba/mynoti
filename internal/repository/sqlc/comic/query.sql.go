// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package comic

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createComicTracking = `-- name: CreateComicTracking :exec
INSERT INTO comic_tracking (url, name, description, html)
VALUES ($1, $2, $3, $4)
RETURNING id, url, name, description, html, last_checked
`

type CreateComicTrackingParams struct {
	Url         string
	Name        pgtype.Text
	Description pgtype.Text
	Html        pgtype.Text
}

func (q *Queries) CreateComicTracking(ctx context.Context, arg CreateComicTrackingParams) error {
	_, err := q.db.Exec(ctx, createComicTracking,
		arg.Url,
		arg.Name,
		arg.Description,
		arg.Html,
	)
	return err
}

const deleteComicTracking = `-- name: DeleteComicTracking :exec
DELETE FROM comic_tracking
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteComicTracking(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteComicTracking, id)
	return err
}

const getAllComicTrackings = `-- name: GetAllComicTrackings :many
SELECT id, url, name, description, html, last_checked
FROM comic_tracking
`

func (q *Queries) GetAllComicTrackings(ctx context.Context) ([]ComicTracking, error) {
	rows, err := q.db.Query(ctx, getAllComicTrackings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ComicTracking
	for rows.Next() {
		var i ComicTracking
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.Name,
			&i.Description,
			&i.Html,
			&i.LastChecked,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getComicTrackingByID = `-- name: GetComicTrackingByID :one
SELECT id, url, name, description, html, last_checked
FROM comic_tracking
WHERE id = $1
`

func (q *Queries) GetComicTrackingByID(ctx context.Context, id int32) (ComicTracking, error) {
	row := q.db.QueryRow(ctx, getComicTrackingByID, id)
	var i ComicTracking
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Name,
		&i.Description,
		&i.Html,
		&i.LastChecked,
	)
	return i, err
}

const getComicTrackingsList = `-- name: GetComicTrackingsList :many
SELECT id, url, name, description, html, last_checked
FROM comic_tracking
ORDER BY last_checked DESC
LIMIT $1 OFFSET $2
`

type GetComicTrackingsListParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetComicTrackingsList(ctx context.Context, arg GetComicTrackingsListParams) ([]ComicTracking, error) {
	rows, err := q.db.Query(ctx, getComicTrackingsList, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ComicTracking
	for rows.Next() {
		var i ComicTracking
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.Name,
			&i.Description,
			&i.Html,
			&i.LastChecked,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComicTracking = `-- name: UpdateComicTracking :exec
UPDATE comic_tracking
SET url = $2, 
    name = $3, 
    description = $4, 
    html = $5, 
    last_checked = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, url, name, description, html, last_checked
`

type UpdateComicTrackingParams struct {
	ID          int32
	Url         string
	Name        pgtype.Text
	Description pgtype.Text
	Html        pgtype.Text
}

func (q *Queries) UpdateComicTracking(ctx context.Context, arg UpdateComicTrackingParams) error {
	_, err := q.db.Exec(ctx, updateComicTracking,
		arg.ID,
		arg.Url,
		arg.Name,
		arg.Description,
		arg.Html,
	)
	return err
}

const updateLastChecked = `-- name: UpdateLastChecked :exec
UPDATE comic_tracking
SET last_checked = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, last_checked
`

func (q *Queries) UpdateLastChecked(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, updateLastChecked, id)
	return err
}
