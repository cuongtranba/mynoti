// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/cuongtranba/mynoti/internal/domain"
	app_context "github.com/cuongtranba/mynoti/pkg/app_context"

	mock "github.com/stretchr/testify/mock"
)

// Watcher is an autogenerated mock type for the Watcher type
type Watcher struct {
	mock.Mock
}

// List provides a mock function with given fields: ctx
func (_m *Watcher) List(ctx *app_context.AppContext) ([]domain.Job, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(*app_context.AppContext) ([]domain.Job, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*app_context.AppContext) []domain.Job); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(*app_context.AppContext) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, j
func (_m *Watcher) Register(ctx *app_context.AppContext, j domain.Job) error {
	ret := _m.Called(ctx, j)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app_context.AppContext, domain.Job) error); ok {
		r0 = rf(ctx, j)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields: ctx
func (_m *Watcher) Stop(ctx *app_context.AppContext) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app_context.AppContext) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unregister provides a mock function with given fields: ctx, id
func (_m *Watcher) Unregister(ctx *app_context.AppContext, id int32) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Unregister")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app_context.AppContext, int32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Watch provides a mock function with given fields: ctx
func (_m *Watcher) Watch(ctx *app_context.AppContext) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app_context.AppContext) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWatcher creates a new instance of Watcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *Watcher {
	mock := &Watcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
